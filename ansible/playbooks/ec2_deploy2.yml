---
- name: Setup Rails app
  hosts: EC2server
  gather_facts: true
  become: true
  tasks:
    - name: Ensure download directory exists
      file:
        path: /ansible/downloaded
        state: directory
      delegate_to: localhost

    - name: Download tfstate from S3
      aws_s3:
        bucket: my-s3-bucket-terraform-state
        object: development/terraform.tfstate
        dest: /ansible/downloaded/terraform.tfstate
        mode: get
      delegate_to: localhost

    - name: Get RDS Endpoint from Terraform output
      command: "terraform output -state=/ansible/downloaded/terraform.tfstate rds_endpoint"
      register: rds_endpoint_raw
      delegate_to: localhost

    - name: Extract just the RDS endpoint (without port)
      set_fact:
        rds_endpoint: "{{ rds_endpoint_raw.stdout.split(':')[0] }}"

    - name: Get RDS Password from Terraform output
      command: "terraform output -state=/ansible/downloaded/terraform.tfstate rds_password"
      register: rds_password
      delegate_to: localhost

    # - name: Download tfstate from S3
    #   aws_s3:
    #     bucket: my-s3-bucket-terraform-state
    #     object: development/terraform.tfstate
    #     dest: /ansible/downloaded/terraform.tfstate
    #     mode: get
    #   delegate_to: localhost

    # - name: Get RDS Endpoint from Terraform output
    #   command: "terraform output -state=/ansible/downloaded/terraform.tfstate rds_endpoint"
    #   register: rds_endpoint
    #   delegate_to: localhost

    # - name: Get RDS Password from Terraform output
    #   command: "terraform output -state=/ansible/downloaded/terraform.tfstate rds_password"
    #   register: rds_password
    #   delegate_to: localhost

    - name: Generate database.yml
      template:
        src: /ansible/templates/database.yml.j2
        dest:  /var/www/raisetech-live8-sample-app/config/database.yml
      vars:
        db_host: "{{ rds_endpoint }}"
        db_password: "{{ rds_password.stdout }}"

    - name: Generate storage.yml
      template:
        src: /ansible/templates/storage.yml.j2
        dest:  /var/www/raisetech-live8-sample-app/config/storage.yml

    - name: Generate application.yml
      template:
        src: /ansible/templates/application.yml.j2
        dest:  /var/www/raisetech-live8-sample-app/config/application.yml

    - name: Generate the systemd file
      template:
        src: /ansible/templates/systemd.yml.j2
        dest: /etc/systemd/system/unicorn.service

    - name: compile app
      block:

      - name: Bundle install
        shell: bash -lc "cd /var/www/raisetech-live8-sample-app && bundle install"
      
      - name: Generate secret key
        shell: bash -lc "cd /var/www/raisetech-live8-sample-app &&  bundle exec rails secret RAILS_ENV=production"
        register: secret_env

      - name: Replace secret key in application.yml
        lineinfile: #特定の行をファイルに追加または置換する
          path: /var/www/raisetech-live8-sample-app/config/application.yml #記述先を指定
          regexp: <will-be-replaced-key>
          line: "SECRET_KEY_BASE: {{ secret_env.stdout }}" # with_itemsに定義した内容が入る

      - name: Rails app setup
        shell: bash -lc "cd /var/www/raisetech-live8-sample-app && RAILS_ENV=production bin/setup "

      - name: Clear Rails cache
        shell: bash -lc "cd /var/www/raisetech-live8-sample-app &&  RAILS_ENV=production rake tmp:cache:clear"

      - name: Precompile assets
        shell: bash -lc "cd /var/www/raisetech-live8-sample-app &&  RAILS_ENV=production rake assets:precompile"
      become: false

    - name: Start nginx service
      service:
        name: nginx
        state: started
    # Unicornの起動
    - name: Ensure unicorn is started
      service:
        name: unicorn
        state: started
        enabled: yes

