version: 2.1           

orbs:
  python: circleci/python@2.0.3
  ansible: orbss/ansible-playbook@0.0.5

parameters:
  run-development-terraform-build:
    type: boolean
    default: false
  run-modules-terraform-build:
    type: boolean
    default: false
  run-ansible:
    type: boolean
    default: false
  run-raisetech-sample-config:
    type: boolean
    default: false     

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.5.7
  ansible:
    docker:
      - image: circleci/python

jobs:
  plan:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Terraform Plan
          command: |
            cd ./terraform/environments/development
            terraform init
            terraform plan 

  apply:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Terraform Apply
          command: |
            cd ./terraform/environments/development
            terraform init
            terraform apply -auto-approve 
            # Terraformのアウトプットを取得
            echo $(terraform output -json) > /tmp/terraform-outputs.json
      - store_artifacts:
          path: /tmp/terraform-outputs.json
          destination: terraform-outputs


  ansible-playbook:
    executor: ansible
    parameters:
      version:
        description: |
          Ansible version
        type: string
        default: ''
      inventory:
        description: |
          Ansible inventory file. The default value must be empty,
          so do not store any value to this environment variable.
          The data must be registered in base64 format
        type: env_var_name
        default: NONEXISTENT_ANSIBLE_INVENTORY
      playbook:
        description: |
          The path of Ansible playbook
        type: string
      private-key:
        description: |
          SSH private key file. The default value must be empty,
          so do not store any value to this environment variable.
          The data must be registered in base64 format
        type: env_var_name
        default: NONEXISTENT_ANSIBLE_SSH_KEY
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "${KEY_FINGERPRINT}"
      - run:
          name: Add EC2 to known hosts
          command: ssh-keyscan 18.177.168.5 >> ~/.ssh/known_hosts
      - ansible/install:
          version: <<parameters.version>>
      - ansible/playbook:
          inventory: <<parameters.inventory>>
          playbook: <<parameters.playbook>>
          private-key: <<parameters.private-key>>
  sample-app-deploy:
    executor: ansible
    parameters:
      version:
        description: |
          Ansible version
        type: string
        default: ''
      inventory:
        description: |
          Ansible inventory file. The default value must be empty,
          so do not store any value to this environment variable.
          The data must be registered in base64 format
        type: env_var_name
        default: NONEXISTENT_ANSIBLE_INVENTORY
      playbook:
        description: |
          The path of Ansible playbook
        type: string
      private-key:
        description: |
          SSH private key file. The default value must be empty,
          so do not store any value to this environment variable.
          The data must be registered in base64 format
        type: env_var_name
        default: NONEXISTENT_ANSIBLE_SSH_KEY
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "${KEY_FINGERPRINT}"
      - run:
          name: Fetch Terraform Outputs from Artifacts
          command: |
            curl -o terraform-outputs.json ${CIRCLE_BUILD_URL}/artifacts/0/home/circleci/project/terraform-outputs/terraform-outputs.json
            which terraform-outputs.json
      - run: 
          name: install the boto3
          command: sudo pip3 install boto3 
      - run:
          name: Set PYTHONPATH
          command: echo 'export PYTHONPATH=$PYTHONPATH:/home/circleci/.local/lib/python3.10/site-packages' >> $BASH_ENV
      - run:
          name: Check Python and boto3
          command: |
            which python
            python -V
            python -m pip show boto3
      - run:
          name: Add EC2 to known hosts
          command: ssh-keyscan 18.177.168.5 >> ~/.ssh/known_hosts
      - ansible/install:
          version: <<parameters.version>>
      - ansible/playbook:
          inventory: <<parameters.inventory>>
          playbook: <<parameters.playbook>>
          private-key: <<parameters.private-key>>
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

workflows:
  # when pipeline parameter, run-development-terraform-build is true, the
  # job is triggered.
  terraform-build-and-deploy:
    when: 
      or: [<< pipeline.parameters.run-development-terraform-build >>, << pipeline.parameters.run-modules-terraform-build >>,<< pipeline.parameters.run-ansible >>]
    jobs:
      - plan          
      - apply:
          requires:
            - plan
      # - ansible-playbook:
      #     version: "2.10.7"
      #     inventory: ANSIBLE_PLAYBOOK_HOSTS
      #     playbook:  ./ansible/playbooks/ec2_deploy.yml
      #     private-key: AWS_PAIR_KEY
      #     requires:
      #       - apply
      - sample-app-deploy:
          version: "2.10.7"
          inventory: ANSIBLE_PLAYBOOK_HOSTS
          playbook:  ./ansible/playbooks/ec2_deploy2.yml
          private-key: AWS_PAIR_KEY
          requires:
             - apply
            # - ansible-playbook

  # when pipeline parameter, run-raisetech-sample-config is true, the
  # job is triggered.
  sample-jobs:
    when: << pipeline.parameters.run-raisetech-sample-config >>
    jobs:
      - cfn-lint

